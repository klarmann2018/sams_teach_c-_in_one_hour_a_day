Quiz

1. You need to remove items that meet a specific condition from a list. Would
   you use std::remove_if() or list::remove_if()?

- list::remove_if(); list::erase();

ans:
    Use the std::list::remove_if() function because it ensures that existing
    iterators to elements in the list(that were not removed) still remain valid.

2. You have a list of a class type ContactItem. How does the list::sort()
   function sort items of this type in the absence of an explicitly specified
   binary predicate?

- list<ContactItem> listContactItems;
  template<typename T>
  bool Predicate(const T& input1, const T& input2)
  {
    return   (input1 < input2);
  }

  list::sort(listContactItems.begin(), listContactItems.end(), Predicate<ContactItem>);

ans:
    list::sort()(or even std::sort()) in the absence of an explicitly supplied
    predicate resorts to a sort using std::less<>, which employs the operator<
    to sort objects in a collection.
    
3. How often does the generate() STL algorithm invoke the generator() function?

- all elements in the container, the size of the container.

ans:
    Once per element in the range supplied.

4. What differentiates std::transform() from std::for_each()?

- for_each(), which works on only a single range. transform, which works on
  assign the result of the specified transformation function to a supplied
  destination range.

ans:
    for_each() returns the function object, too.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
Exercises

1. Write a binary predicate that accepts strings as input arguments and returns
   a value based on case-insensitive comparison.

- see ex23_01.cpp

ans:
    Here is one solution:
    struct CaseInsensitiveCompare
    {
        bool operator()(const string& str1, const string& str2) const
        {
            string str1Copy(str1), str2Copy(str2);
            transform(str1Copy.begin(), str1Copy.end(), str1Copy.begin(), ::tolower);
            transform(str2Copy.begin(), str2Copy.end(), str2Copy.begin(), ::tolower);
            
            return (str1Copy < str2Copy);
        }
    };

2. Demonstrate how STL algorithms such as copy use iterators to do their
   functions without needing to know the nature of the destination collections
   by copying between two sequences held in two dissimilar containers.

- see ex23_02.cpp

ans:
    Here is the demonstration. Note how std::copy() works without knowing the
    nature of the collections. It work using the iterator classes only:
#include<vector>
#include<algorithm>
#include<list>
#include<string>
#include<iostream>

using namespace std;

int main()
{
    list<string> listNames;
    listNames.push_back("Jack");
    listNames.push_back("John");
    listNames.push_back("Anna");
    listNames.push_back("Skate");

    vector<string> vecName(4);
    copy(listNames.begin(), listNames.end(), vecName.begin());

    vector<string>::const_iterator iNames;
    for(iNames = vecName.begin(); iNames != vecName.end(); ++ iNames)
        cout << *iNames << ' ';

    return 0;
}

3. You are writing an application that records the characteristics of stars that
   come up on the horizon in the order in which they rise. In astronomy, the
   size of the star --- as well as information on their relative rise and set
   sequences --- is important. If you're sorting this collection of stars on the
   basis of their sizes, would you use std::sort or std::stable_sort?

- see ex23_03.cpp
看答案吧 不打算 做了， 有空 再弄！

ans:
    The difference between std::sort() and std::stable_sort() is that the
    latter, when sorting, ensures the relative positions of the objects. Because
    the application needs to store data in the sequence it happened, you should
    choose stable_sort() to keep the relative ordering between the celestial
    events intact.

